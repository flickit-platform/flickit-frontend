name: CI/CD Frontend

on:
  push:
    branches:
      - '*'
    tags:
      - '*'

  pull_request:
    branches:
      - '*'

jobs:
  Build_Frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: docker build -t frontend ./

  Test:
    needs: Build_Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: npm install  # Install dependencies using npm
      - name: Test and coverage
        run: npm run test -- --coverage  # Run tests with Vitest and generate coverage
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: lcov-report
          path: ./coverage/lcov.info

  Sonar:
    needs: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: lcov-report  # Name of the artifact to download
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  Frontend_Push_Latest_Image:
    if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
    needs: Sonar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: create image from repository
        run: docker build -t ghcr.io/flickit-platform/flickit-frontend:"${GITHUB_SHA:0:7}" ./
      - name: login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: flickit-platform
          password: ${{ secrets.GH_PACKAGES_TOKEN }}
      - name: push image to GitHub Container Registry
        run: docker push ghcr.io/flickit-platform/flickit-frontend:"${GITHUB_SHA:0:7}"

  Frontend_Deploy_With_Webhook:
    needs: Frontend_Push_Latest_Image
    runs-on: ubuntu-latest
    steps:
      - name: Deploy service on Webhook
        run: |
          status_code=$(curl --silent --output /dev/null --write-out "%{http_code}" -X POST "${{ secrets.DEPLOY_WEBHOOK_URL }}?tag=${GITHUB_SHA:0:7}")
          if [ "$status_code" -ne 204 ]; then
            echo "Unexpected status code: $status_code"
            exit 1
          fi

  Frontend_Push_Image:
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
    needs: Sonar
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.TAG.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
      - name: Set output
        id: TAG
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
      - name: Check output
        env:
          RELEASE_VERSION: ${{ steps.TAG.outputs.tag }}
        run: |
          echo $RELEASE_VERSION
          echo ${{ steps.TAG.outputs.tag }}
      - name: login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: flickit-platform
          password: ${{ secrets.GH_PACKAGES_TOKEN }}
      - uses: actions/checkout@v2
      - name: create image from repository
        run: docker build -t ghcr.io/flickit-platform/flickit-frontend:${{ steps.TAG.outputs.tag }} ./
      - name: push image to GitHub Container Registry
        run: docker push ghcr.io/flickit-platform/flickit-frontend:${{ steps.TAG.outputs.tag }}

  Frontend_Deploy:
    needs: Frontend_Push_Image
    runs-on: ubuntu-latest
    steps:
      - name: Deploy service on Webhook
        run: |
          status_code=$(curl --silent --output /dev/null --write-out "%{http_code}" -X POST "${{ secrets.FRONTEND_VERSION }}?FRONTEND_VERSION=${TAG}")
          if [ "$status_code" -ne 204 ]; then
            echo "Unexpected status code: $status_code"
            exit 1
          fi
        env:
          TAG: ${{needs.Frontend_Push_Image.outputs.TAG}}
